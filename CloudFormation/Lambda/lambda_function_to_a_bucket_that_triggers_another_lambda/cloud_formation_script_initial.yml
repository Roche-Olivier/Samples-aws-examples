
Description:
  Reference a bucket where a zip file has been uploaded to with the relevant lambda code.
  Create a role and a lambda function with code in the lambda function.
  To make this work you need to have a zip file already copied to the bucket you want to referecne for the source code.

Parameters:
  # Role nae wyou would like to call your role
  roleName:
    Type: String
    Default: 'col-lambda-role'
  # The name you want to call your lambda function
  lambdaInitialFunctionName:
    Type: String
    Default: 'col-lambda-initial-function'
  # The name you want to call your lambda function
  lambdaProcessFunctionName:
    Type: String
    Default: 'col-lambda-process-function'
  #The source code bucket where the zip files would reside that you want to populate the lambda function codde with.
  s3CodeBucket:
    Type: String
    Default: 'col-code-repo-for-lambda'
  # The name of the zip file you want to use for the code.
  s3CodezipKey:
    Type: String
    Default: 'my_code.zip'

  # The name of the bucket that the objects be put into with the processor function.
  s3CompletedBucket:
    Type: String
    Default: 'col-completed-bucket-12345'
  
  # The name of the bucket that the objects will arrive into.
  s3IncomingBucket:
    Type: String
    Default: 'col-incoming-bucket-12345'
  # The name of the bucket that the objects will arrive into.
  # Note the ARN needs to reference the 's3IncomingBucket' Parameter value
  # You have to add the arn like this to avoid circular ref
  s3IncomingBucketARN:
    Type: String
    Default: arn:aws:s3:::col-incoming-bucket-12345

Resources:
  # Create the role for the lambda function
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref roleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  # Create the lambda function
  LambdaInitialFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs16.x
      Role: !GetAtt LambdaRole.Arn
      Handler: index.handler
      FunctionName: !Ref lambdaInitialFunctionName
      Architectures: 
        - x86_64
      Code: 
        S3Bucket: !Ref s3CodeBucket
        S3Key: !Ref s3CodezipKey
      Description: Lambda function example with code deployed into the function.
      Tags: 
        - Key: "Application"
          Value: "test-app"
      Timeout: 10
  # Create the bucket to be monitored
  S3BucketComplete:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Ref s3CompletedBucket
  # The function that will be triggered when an object arrives in the incomng bucket.
  LambdaProcessFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs16.x
      Role: !GetAtt LambdaRole.Arn
      Handler: index.handler
      FunctionName: !Ref lambdaProcessFunctionName
      Architectures: 
        - x86_64
      Code: 
        S3Bucket: !Ref s3CodeBucket
        S3Key: !Ref s3CodezipKey
      Description: Lambda function to be triggered when a file lands in the bucket.
      Tags: 
        - Key: "Application"
          Value: "test-app"
      Timeout: 10
  # Create the bucket to be monitored
  S3BucketIncoming:
    Type: AWS::S3::Bucket
    DependsOn:
        - LambdaInvokePermission
    Properties: 
      BucketName: !Ref s3IncomingBucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt LambdaProcessFunction.Arn
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .json
  # Create the LambdaInvokePermission reference
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LambdaProcessFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref s3IncomingBucketARN



















